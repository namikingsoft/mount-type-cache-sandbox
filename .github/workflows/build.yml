on: [push]

name: Build

jobs:
  app:
    name: Build docker image using mount type cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get Date
        id: get-date
        run: |
          echo "::set-output name=yearmonth::$(/bin/date -u "+%Y%m")"
          echo "::set-output name=timestamp::$(/bin/date -u "+%s")"
        shell: bash
      - uses: actions/cache@v2
        id: buildx-cache
        with:
          key: ${{ runner.os }}-buildx-${{ steps.get-date.outputs.yearmonth }}-${{ steps.get-date.outputs.timestamp }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ steps.get-date.outputs.yearmonth }}-
          path: |
            /tmp/buildx-cache
      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
        id: docker-builder
      - name: Restore buildx cache
        if: steps.buildx-cache.outputs.cache-hit == 'true'
        run: |
          docker buildx stop --builder ${{ steps.docker-builder.outputs.name }}
          docker run --rm --volumes-from buildx_buildkit_${{ steps.docker-builder.outputs.name }}0 \
            -v /tmp/buildx-cache:/backup \
            alpine /bin/sh -c "cd / && tar xf /backup/mount.tar.gz"
          docker buildx inspect --builder ${{ steps.docker-builder.outputs.name }} --bootstrap
          docker buildx --builder ${{ steps.docker-builder.outputs.name }} du --verbose
      - uses: docker/build-push-action@v2
        id: docker_build
        with:
          builder: ${{ steps.docker-builder.outputs.name }}
          context: .
          push: false
          cache-from: |
            type=local,src=/tmp/buildx-cache/buildx
          cache-to: |
            type=local,mode=max,dest=/tmp/buildx-cache/buildx
          tags: |
            app:latest
      - name: Backup buildx cache
        env:
          KEEP_STORAGE: 1073741824 # this is 1GB
        run: |
          echo "Before pruning"
          docker buildx --builder ${{ steps.docker-builder.outputs.name }} du --verbose
          echo "Start pruning"
          docker buildx --builder ${{ steps.docker-builder.outputs.name }} prune --force --filter type=frontend
          docker buildx --builder ${{ steps.docker-builder.outputs.name }} prune --force --filter type=regular
          docker buildx --builder ${{ steps.docker-builder.outputs.name }} prune --force --filter type=source.local 
          docker buildx --builder ${{ steps.docker-builder.outputs.name }} prune --force --keep-storage ${KEEP_STORAGE}
          echo "After pruning"
          docker buildx --builder ${{ steps.docker-builder.outputs.name }} du --verbose
          echo "Backup buildx cache"
          docker run --rm --volumes-from buildx_buildkit_${{ steps.docker-builder.outputs.name }}0 \
            -v /tmp/buildx-cache:/backup \
            alpine /bin/sh -c "cd / && tar cf /backup/mount.tar.gz /var/lib/buildkit"
      - uses: mxschmitt/action-tmate@v3
        if: ${{ failure() }}
      - run: echo ${{ steps.docker_build.outputs.digest }}
